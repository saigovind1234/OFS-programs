 Ram and Bheem are working on the singly linked list concept.
They have chosen a number each, num1 and num2.

If the number is 432, then the linked list is created as 2->3->4.

Your task is to help Mr Ram and Bheem to find the addition of num1 and num2.
And display the result as shown in sample testcases.

Input Format:
-------------
Line-1: two space separated integers, N and M, length of num1 and num2.
Line-2: N space separated integers, digits of the num1, from end to start.
Line-3: M space separated integers, digits of the num2, from end to start.

Output Format:
--------------
Print the digits of the addition result.

NOTE:
-----
You may assume the num1, num2, do not contain any leading zero, 
except the value of num1/num2 is 0 itself.
i.e., the list do not conatin any trailing zero.


Sample Input-1:
---------------
3 3
1 2 3
4 5 6

Sample Output-1:
----------------
5 7 9

Explanation:
------------
Original numbers are num1=321 and num2=654
Addition is 321+654= 975 => the output is 5 7 9.


Sample Input-2:
---------------
4 3
4 3 5 6
8 7 6

Sample Output-2:
----------------
2 1 2 7

Explanation:
------------
Original numbers are num1=6534 and num2=678
Addition is 6534+678= 7212 => the output is 2 1 2 7.
test case:
case =1
input =4 3
4 3 5 6
8 7 6
output =2 1 2 7

case =2
input =6 3
9 9 9 9 9 9
9 9 9
output =8 9 9 0 0 0 1

case =3
input =6 5
8 5 3 9 7 9
7 8 4 6 9
output =5 4 8 5 7 0 1

case =4
input =10 7
9 4 6 7 4 5 6 3 4 7
8 4 3 2 8 9 4
output =7 9 9 9 2 5 1 4 4 7

case =5
input =16 12
9 4 6 7 4 5 6 3 4 7 8 5 3 9 7 9
8 4 3 2 8 9 4 7 8 4 6 9
output =7 9 9 9 2 5 1 1 3 2 5 5 4 9 7 9

case =6
input =6 7
7 0 0 0 8 7
0 0 0 8 7 8 6
output =7 0 0 8 5 6 7
ans:
import java.util.*;
class Node{
    int data;
    Node next;
    Node(int d){
        data=d;
        next=null;
    }
}
class ll{
    public   Node hptr=null;
    public  void append(int d){
        if(hptr==null){
            hptr=new Node(d);
        }
        else{
        Node temp=hptr;
        
        while(temp.next!=null){
            temp=temp.next;
        }
        Node f=new Node(d);
        temp.next=f;
        }
    }

    public static ll sum(Node g,Node c){
       ll h=new ll();
       int c1=0;
       while(g!=null || c!=null){
           int y=0;
           if(g!=null){
               y=y+g.data;
           }
           if(c!=null){
               y=y+c.data;
           }
          y=y+c1;
           h.append(y%10);
           c1=y/10;
           if(g!=null){           g=g.next;
           }
           if(c!=null){
           c=c.next;
           }
       }
       if(c1!=0){
           h.append(c1);
       }
       return h;
    }
    public static void display(Node b){
        Node v=b;
        while(v!=null){
            System.out.print(v.data+" ");
            v=v.next;
        }
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
        int b=sc.nextInt();
 
        ll h=new ll();
        ll m=new ll();
        for(int i=0;i<a;i++){
            int g=sc.nextInt();
            h.append(g);
        }
        for(int i=0;i<b;i++){
            int g=sc.nextInt();
            m.append(g);
        }
      
        ll res=sum(h.hptr,m.hptr);
   
     
        res.display(res.hptr);
    }
    
}
***********************************************************************
You are given a string S, consist of both lowercase and uppercase alphabets.
Your task is to find out the length of the longest word W with the 
following properties:
	- The word should be the longest.
	- The word can be formed with letters of S, and you can shuffle the letters 
	as your need. You cannot use the letters more than their occurence count.
	- The word should be equal to the reverse of it.
	
NOTE: Alphabets are case sensitive
"Aa" is  not equal to "aA". The letters 'a' and 'A' are not same

Input Format:
-------------
A string S, consist of lower/uppercase letters

Output Format:
--------------
Print an integer, length of longest word W.


Sample Input-1:
---------------
abccccdd

Sample Output-1:
----------------
7

Explanation:
------------
One of the longest word can be formed is "ccdadcc", with length 7.


Sample Input-2:
---------------
AIbohPhObia

Sample Output-2:
----------------
5

Explanation:
------------
One of the longest word can be formed is "bhPhb", with length 5.



import java.util.*;
class re{
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        String v=sc.nextLine();
        HashMap<Character,Integer>p=new HashMap<>();
        for(int i=0;i<v.length();i++){
            p.put(v.charAt(i),p.getOrDefault(v.charAt(i),0)+1);
        }
        int res=0;
        int f=0;
        for(Character h:p.keySet()){
            if(p.get(h)%2==0){
                res=res+p.get(h);
            }
            else if(p.get(h)==1){
                f=1;
            }
            else if(p.get(h)%2!=0){
                int y=p.get(h)-(p.get(h)%2);
                if(p.get(h)%2==1){
                    f=1;
                }
                res=res+y;
            }
        }
        if(f==1){
            System.out.println(res+f);
        }
        else{
            System.out.println(res);
        }
    }
}
*****************************************************************************************************************
You are given a 32-bit signed integer N. Your task is to reverse 
the binary representation of N and print its decimal equivalent as integer. 

Input Format:
-------------
An integer, signed integer.

Output Format:
--------------
Print an integer output.


Sample Input-1:
---------------
1420227820

Sample Output-1:
----------------
925852970

Explanation:
------------
The given integer is 1420227820
binary representation is 01010100101001101111010011101100

Reverse binary representation is 00110111001011110110010100101010
so return 925852970.


Sample Input-2:
---------------
2132772745

Sample Output-2:
----------------
-1847461634

Explanation:
------------
The given integer is 2132772745
binary representation is 01111111000111111000011110001001, 

Reverse binary representation is 10010001111000011111100011111110
so return -1847461634.

import java.util.*;
import java.math.*;
class re{
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int f=sc.nextInt();
        StringBuilder v=new StringBuilder(Integer.toBinaryString(f));
    while(v.length()<32){
        v.insert(0,"0");
    }
        BigInteger t=new BigInteger(v.reverse().toString(),2);
        int g=t.intValue();
        System.out.println(g);
    }
}
***************************************************************
actorial of N means, Product first N natural numbers.
e.g., N= 1 * 2 * 3 * ... * N.

You are given an integer N,
Your task is to findout the number of 0's at the end of the factorial value of N.

for example : N =5 => Factorial of 5 is 120.
0' s at the end of 120 are 1.

Constraint : 1<= N <= 10000

Input Format:
-------------
An integer N

Output Format:
--------------
Print an integer, number of 0's at the end.


Sample Input-1:
---------------
5

Sample Output-1:
----------------
1

Explnation:
-----------
5! = 120, so the number of 0's at the end are 1. 


Sample Input-2:
---------------
4

Sample Output-2:
----------------
0

Explnation:
-----------
4! = 24, so the number of 0's at the end are 0. 














import java.util.*;
class re{
    
    public static int  tailingzero(int g){
      int m=g;
    int s=0;
    while(g/5>0){
        s=s+(g/5);
        g=g/5;
    }
      return s;
    }
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int a=sc.nextInt();
    
        System.out.println(tailingzero(a));
    }
}
*******************************
Every kid enjoys getting out of the classroom and exploring, and 
school excursions are one of the finest ways to do so. 

ABC School organised a field trip for its students. Students are requested 
to form a line, and their heights are supplied to you. You need to make 
the students to stand in ascending order of their heights. 

Your task is to find out, the minimum number of students who must change 
their positions in order to make every student to stand in ascending order.

Note: When a student is selected, the student can change position in a 
possible way among all of them, and 
the other students remain in their positions.

Input Format:
-------------
Line-1: An integer N, number of the students.
Line-2: N space separated integers, heights of the students.

Output Format:
--------------
Print an integer, minimum number of moves.


Sample Input-1:
---------------
6
1 1 4 2 1 3

Sample Output-1:
----------------
3

Explanation:
------------
Initially Heights are as follows : [1,1,4,2,1,3] 
Targeted Heights are as follows : [1,1,1,2,3,4] 
On index 2: you have 4 vs 1 so you have to change the position of student. 
On index 4: you have 1 vs 3 so you have to change the position of student. 
On index 5: you have 3 vs 4 so you have to change the position of student. 


Sample Input-2:
---------------
5
5 1 4 2 3

Sample Output-2:
----------------
5



***************************************************************************************
AlphaCipher is a string formed from another string by rearranging its letters

You are given a string S.
Your task is to check, can any one of the AlphaCipher is a palindrome or not.

Input Format:
-------------
A string S

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
carrace


Sample Output-1:
----------------
true


Sample Input-2:
---------------
code

Sample Output-2:
----------------
false



import java.util.*;
class re{
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        HashMap<Character,Integer>p=new HashMap<>();
        String v=sc.nextLine();
        for(int i=0;i<v.length();i++){
            p.put(v.charAt(i),p.getOrDefault(v.charAt(i),0)+1);
        }
        int m=0;
        int t=0;
        for(Character h:p.keySet()){
            if(p.get(h)%2==0){
                m=m+p.get(h);
            }
            else if(p.get(h)==1){
                t=1;
        
            }
            else{
                m=m+p.get(h)-1;
                t=1;
            }
        }
        if(t+m!=v.length()){
            System.out.println("false");
        }
        else{
            System.out.println("true");
        }
       
    }
}
**********************************************************************************************************************************************************************************
MotorSport Ltd hosting a Racing Championship. Mr. Ajith is participating 
in car races. Each race start and end in perticular time intervals.

You are given an array of racing time intervals consisting of
start and end times [[s1,e1],[s2,e2],...] (s < e ) of N races, in which 
Ajith has to participate. Your task is to determine whether Ajith can 
in all the races or not.

NOTE: If a race starts at time 'a' ends at time 'b', 
another race can start at 'b'.

Input Format:
-------------
Line-1: An integer N, number of races Ajith has to participate.
Next N lines: Two space separated integers, start and end time of each race.

Output Format:
--------------
Print a boolean value.


Sample Input-1:
---------------
3
0 30
5 10
15 20

Sample Output-1:
----------------
false

Sample Input-2:
---------------
3
0 10
15 25
30 35

Sample Output-2:
----------------
true



import java.util.*;
class re{
    public static void main (String[] args) {
        Scanner sc=new Scanner(System.in);
        int b=0;
        int f=0;
    TreeMap<Integer,Integer>p=new TreeMap<>();
        int v=sc.nextInt();
         for(int i=0;i<v;i++){
            int a=sc.nextInt();
            int b1=sc.nextInt();
           p.put(a,b1);
            }
        for(Integer m:p.keySet()){
            if(m<b){
                f=1;
                break;
            }
            else{
                b=p.get(m);
            }
        }
        if(f==1){
            System.out.println("false");
        }
        else{
            System.out.println("true");
        }
       
        }
}
*******************************************************
/*
Bablu is playing a word puzzle game.
Initially, puzzle conatins a word S, you need to form another word 'T' using 'S'.

The game rules are as follows:
	1. You can jumble the letters in the given word as your need.
	2. You can add only one letter to the jumbled word at any position.
	
You are given two words, S and T.
Your  task is to find and print the newly added character to S to form T.


Input Format:
-------------
Two space separated Strings S and T.
 
Output Format:
--------------
Print a character, added to S.


Sample Input-1:
---------------
ram marg

Sample Output-1:
----------------
g


Sample Input-2:
---------------
av ava

Sample Output-2:
----------------
a


=== testcases ===
case =1
input =ram marg
output =g

case =2
input =av ava
output =a

case =3
input =compete complete
output =l

case =4
input =mission emission
output =e

case =5
input =tore tower
output =w

case =6
input =mississipi missiissipi
output =i

case =7
input =concat contact
output =t

case =8
input =hour rough
output =g

*/

import java.util.*;

class FindTheDifference {
	public char findTheDifference(String s, String t) {
		char ch = 0;
		for (int i = 0; i < s.length(); i += 1) {
			ch ^= s.charAt(i);
		}
		for (int i = 0; i < t.length(); i += 1) {
			ch ^= t.charAt(i);
		}
		return ch;
	}
	
	//Approach:2 Summing up ASCII values
	/*
	public char findTheDifference(String s, String t) {
        int sSum = 0;
        int tSum = t.charAt(t.length() - 1);
        for(int i = 0; i < s.length() ; i++){
            sSum += s.charAt(i);
            tSum += t.charAt(i);
        }
        
        return (char)(tSum - sSum);
    }
	*/
	
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String s=sc.next();
		String t=sc.next();
		System.out.println(new FindTheDifference().findTheDifference(s,t));
	}
}
************************************
/*
The Valid shortcuts of a string "abcd", are as follows:
abcd, abcd, a1cd, ab1d, abc1, 2cd, a2d, ab2, 1b1d, 1bc1,a1c1, 1b2, 2c1, 3d, a3, 4

You are given a string S and shortcut string  SC, 
Your task is to find out whether the string matches with the given shortcut or not.
if matched print true, else false.

Note:
String S contains only lowercase letters and String SC contains only 
lowercase letters and digits.

Input Format:
-------------
Two space separated Strings S and SC

Output Format:
--------------
Print a boolean value


Sample Input-1:
---------------
internationalization i12iz4n

Sample Output-1:
----------------
true


Sample Input-2:
---------------
apple a2e

Sample Output-2:
----------------
false


=== testcases ===
case =1
input =internationalization i12iz4n
output =true

case =2
input =apple a2e
output =false

case =3
input =testcase t2t2sc
output =false

case =4
input =testcase t2t3se
output =false

case =5
input =internationalization i12iz5n
output =false

case =6
input =apple a1p1e
output =true

case =7
input =problemisvalidwordabbreviation p2b10w11t2n
output =true

case =8
input =problemisvalidwordabbreviation p2b10w10t2n
output =false

case =9
input =ilovemom 1love3
output =true

case =10
input =ilovemom 1l2c3
output =false

*/

import java.util.*;

class ValidWordAbbreviation{
    public boolean validWordAbbreviation(String word, String abbr) {
        int i = 0, j = 0;
        while (i < word.length() && j < abbr.length()) {
            if (word.charAt(i) == abbr.charAt(j)) {
                ++i;++j;
                continue;
            }
            if (abbr.charAt(j) <= '0' || abbr.charAt(j) > '9') {
                return false;
            }
            int start = j;
            while (j < abbr.length() && abbr.charAt(j) >= '0' && abbr.charAt(j) <= '9') {
                ++j;
            }
            int num = Integer.valueOf(abbr.substring(start, j));
            i += num;
        }
        return i == word.length() && j == abbr.length();
    }
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		String s=sc.next();
		String t=sc.next();
		System.out.println(new ValidWordAbbreviation().validWordAbbreviation(s,t));
	}
}
**************************************************************
/*
You have given N bricks.
You need to construct a staircase as follows:
	1. =
	2. ==
	3. ===
	4. ====
Where = indicates one brick.

Another condition is row-1 should have 1 brick, row-2 should have 2 bricks and so on.
i.e., i-th row should have 'i' bricks.

Your task is to findout total number of staircases can be formed with the given condition.

Input Format:
-------------
An integer N

Output Format:
--------------
Print an integers, number of staircases


Sample Input-1:
---------------
5

Sample Output-1:
----------------
2

Explanation:
------------
row-1:	=
row-2:	==
row-3:	==
Only 2 rows satisfies the condition.


Sample Input-2:
---------------
8

Sample Output-2:
----------------
3

Explanation:
------------
row-1:	=
row-2:	==
row-3:	===
row-4:	==

Only 3 rows satisfies the condition.

=== testcases ===
case =1
input =5
output =2

case =2
input =8
output =3

case =3
input =9999
output =140

case =4
input =96786765
output =13912

case =5
input =965456
output =1389

case =6
input =876842
output =1323

case =7
input =213465278
output =20661

case =8
input =2147483647
output =65535


*/

import java.util.*;

class ArrangeCoins {
	public int arrangeCoins(int n) {
		long left = 0, right = n;
		long k, curr;
		while (left <= right) {
			  k = left + (right - left) / 2;
			  curr = k * (k + 1) / 2;

			  if (curr == n) return (int)k;

			  if (n < curr) {
					right = k - 1;
			  } else {
					left = k + 1;
			  }
		}
		return (int)right;
	}
	public static void main(String args[])
	{
		Scanner sc=new Scanner(System.in);
		int num=sc.nextInt();
		System.out.println(new ArrangeCoins().arrangeCoins(num));
	}
}
